<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="FundingMainMapper">

	<!-- resultMap join하려면 필요 -->
	<resultMap type="MemberVO" id="MemberVO">
		<result column="member_name" property="member_name"/>
		<result column="member_photo" property="member_photo"/>
		<result column="member_business_name" property="member_business_name"/>
	</resultMap>
	<resultMap type="FundingMainVO" id="FundingMainVO">
		<result column="funding_idx" property="funding_idx"/>
		<result column="member_idx" property="member_idx"/>
		<result column="funding_title" property="funding_title"/>
		<result column="funding_target_price" property="funding_target_price"/>
		<result column="funding_current_price" property="funding_current_price"/>
		<result column="funding_start_date" property="funding_start_date"/>
		<result column="funding_end_date" property="funding_end_date"/>
		<result column="funding_permit_state" property="funding_permit_state"/>
		<result column="funding_current_state" property="funding_current_state"/>
		<result column="funding_category" property="funding_category"/>
		<result column="funding_views" property="funding_views"/>
		<result column="funding_thumbnail" property="funding_thumbnail"/>
		<collection property="memberVO" resultMap="MemberVO"></collection>
	</resultMap>
	<resultMap type="FundingCommunityVO" id="FundingCommunityVO">
		<result column="funding_detail_community_idx" property="funding_detail_community_idx"/>
		<result column="funding_detail_community_content" property="funding_detail_community_content"/>
		<result column="funding_detail_community_regdate" property="funding_detail_community_regdate"/>
		<result column="funding_detail_community_category" property="funding_detail_community_category"/>
		<result column="funding_idx" property="funding_idx"/>
		<result column="member_idx" property="member_idx"/>
		<collection property="memberVO" resultMap="MemberVO"></collection>
	</resultMap>
	<resultMap type="FundingQnaVO" id="FundingQnaVO">
		<result column="funding_qna_idx" property="funding_qna_idx"/>
		<result column="funding_idx" property="funding_idx"/>
		<result column="member_idx" property="member_idx"/>
		<result column="parent_id" property="parent_id"/>
		<result column="depth" property="depth"/>
		<result column="funding_qna_state" property="funding_qna_state"/>
		<result column="funding_qna_secret" property="funding_qna_secret"/>
		<result column="funding_qna_content" property="funding_qna_content"/>
		<result column="funding_qna_regdate" property="funding_qna_regdate"/>
		<result column="funding_qna_writer_idx" property="funding_qna_writer_idx"/>
		<collection property="memberVO" resultMap="MemberVO"></collection>
	</resultMap>


	<!-- 펀딩 메인 페이지 리스트 출력 -->
	<select id="listMain" parameterType="FundingMainVO" resultType="FundingMainVO" resultMap="FundingMainVO">
		SELECT 
			fd.funding_idx,
			fd.member_idx,
			fd.funding_title,
			fd.funding_thumbnail,
			fd.funding_target_price,
			fd.funding_current_price,
			fd.funding_start_date,
			fd.funding_end_date,
			fd.funding_permit_state,
			fd.funding_current_state,
			fd.funding_category,
			fd.funding_views,
			mem.member_business_name,
			mem.member_idx
		FROM funding AS fd
		JOIN member AS mem
		<choose>
			<when test="dog != null">
				ON fd.funding_category = 0 AND fd.member_idx = mem.member_idx AND funding_permit_state=1
			</when>
			<when test="cat != null">
				ON fd.funding_category = 1 AND fd.member_idx = mem.member_idx AND funding_permit_state=1
			</when>
			<when test="other != null">
				ON fd.funding_category = 2 AND fd.member_idx = mem.member_idx AND funding_permit_state=1
			</when>
			<otherwise>
				ON fd.funding_category = 0 AND fd.member_idx = mem.member_idx AND funding_permit_state=1
			</otherwise>
		</choose>
		<choose>
			<when test="sortNew != null">
				order by funding_idx desc limit #{startRowNum}, 9;
			</when>
			<when test="sortView != null">
				order by funding_views desc limit #{startRowNum}, 9;
			</when>
			<when test="sortPrice != null">
				order by funding_current_price desc limit #{startRowNum}, 9;
			</when>
			<otherwise>
				order by funding_idx desc limit #{startRowNum}, 9;
			</otherwise>
		</choose>
	</select>
	<select id="listMainCount" resultType="int">
		SELECT COUNT(funding_idx)
		FROM funding
		<choose>
			<when test="dog != null">
				where funding_category=0 AND funding_permit_state=1;
			</when>
			<when test="cat != null">
				where funding_category=1 AND funding_permit_state=1;
			</when>
			<when test="other != null">
				where funding_category=2 AND funding_permit_state=1;
			</when>
			<otherwise>
				where funding_category=0 AND funding_permit_state=1;
			</otherwise>
		</choose>
	</select>
	
	
	
	<!-- 펀딩 글 상세 -->
	<select id="read" parameterType="FundingMainVO" resultType="FundingMainVO" resultMap="FundingMainVO">
		SELECT 
			fu.funding_idx,
			fu.funding_title,
			fu.funding_thumbnail,
			fu.funding_content,
			fu.funding_notice,
			fu.funding_target_price,
			fu.funding_current_price,
			fu.funding_start_date,
			fu.funding_end_date,
			fu.funding_permit_state,
			fu.funding_current_state,
			fu.funding_category,
			fu.member_idx,
			mem.member_idx,
			mem.member_photo,
			mem.member_business_name
		FROM funding as fu
		JOIN member as mem
		WHERE funding_idx = #{funding_idx} AND fu.member_idx = mem.member_idx
	</select>
	<!-- 펀딩 옵션 카운트 -->
	<select id="orderCount" resultType = "int">
		SELECT COUNT(funding_order_idx)
		FROM funding_order
		WHERE funding_idx= #{funding_idx}
	</select>
	<!-- 조회수 증가 -->
	<update id="fundingViews" parameterType="int">
		UPDATE funding SET
		funding_views = funding_views+1
		WHERE funding_idx = #{funding_idx}
	</update>
	
	
	<!-- 펀딩 커뮤니티 댓글 리스트 -->
	<select id="readFundingCommunityComment" resultType="FundingCommunityVO" parameterType="FundingCommunityVO" resultMap="FundingCommunityVO">
		select 
			commu.funding_detail_community_idx,
			commu.funding_detail_community_content,
			commu.funding_detail_community_regdate,
			commu.funding_detail_community_category,
			commu.funding_idx,
			commu.member_idx,
			mem.member_name,
			mem.member_photo
		FROM funding_detail_community AS commu
		JOIN member AS mem 
		ON commu.funding_idx = #{funding_idx} and commu.member_idx = mem.member_idx
		order by funding_detail_community_idx desc limit #{startRowNum}, 9; 
	</select>
	
	<!-- 펀딩 커뮤니티 댓글 작성 -->
	<insert id="writeFundingCommunityComment" parameterType="FundingCommunityVO">
		INSERT INTO funding_detail_community
			(
				funding_idx,
				member_idx,
				funding_detail_community_content,
				funding_detail_community_category
			)
		VALUES
			(
				#{funding_idx},
				#{member_idx},
				#{funding_detail_community_content},
				#{funding_detail_community_category}
			)	
	</insert>
	
	<!-- 펀딩 커뮤니티 댓글 수정 -->
	<update id="modifyFundingCommunityComment" parameterType="FundingCommunityVO">
		UPDATE funding_detail_community 
		SET funding_detail_community_content = #{funding_detail_community_content}, funding_detail_community_category = #{funding_detail_community_category}
		WHERE funding_idx = #{funding_idx} and member_idx = #{member_idx};
	</update>
	
	<!-- 펀딩 커뮤니티 댓글 삭제 -->
	<update id="deleteFundingCommunityComment" parameterType="FundingCommunityVO">
		DELETE FROM funding_detail_community
		WHERE funding_idx = #{funding_idx} and member_idx = #{member_idx};
	</update>
	
	<!-- 펀딩 커뮤니티 댓글 갯수 -->
	<select id="countFundingCommunityComment" parameterType="FundingCommunityVO" resultType="int">
		SELECT COUNT(funding_detail_community_idx)
		FROM funding_detail_community
		where funding_idx=#{funding_idx};
	</select>
	
	<!-- 펀딩 qna 작성 -->
	<insert id="insertFundingQna" parameterType="java.util.HashMap" useGeneratedKeys="true" keyProperty="funding_qna_idx">
		insert into funding_qna
		(
            funding_idx,
            member_idx,
            parent_id,
            depth,
            funding_qna_secret,
            funding_qna_content,
            funding_qna_writer_idx
        )
        values
        (
            #{funding_idx},
            #{member_idx},
            #{parent_id},
            #{depth},
            #{funding_qna_secret},
            #{funding_qna_content},
            #{funding_qna_writer_idx}
        )
	</insert>
	
	<!-- 펀딩 qna 댓글 리스트 ssss-->
	<select id="readFundingQnaList" resultType="FundingQnaVO" parameterType="java.util.HashMap" resultMap="FundingQnaVO">
		select 
			qna.funding_qna_idx,
			qna.funding_idx,
			qna.member_idx,
			qna.parent_id,
			qna.depth,
			qna.funding_qna_state,
			qna.funding_qna_secret,
			qna.funding_qna_content,
			qna.funding_qna_writer_idx,
			qna.funding_qna_regdate,
			mem.member_name,
			mem.member_business_name
		FROM funding_qna AS qna
		JOIN member AS mem 
		ON qna.funding_idx = #{funding_idx} and qna.member_idx = mem.member_idx and qna.depth = 0
		order by funding_qna_idx desc limit ${startRowNumQna}, 9;
	</select>
	
	<!-- 펀딩 qna 댓글 답변-->
	<select id="readFundingQnaAnswer" resultType="FundingQnaVO" parameterType="java.util.HashMap" resultMap="FundingQnaVO">
		select 
			qna.funding_qna_idx,
			qna.funding_idx,
			qna.member_idx,
			qna.parent_id,
			qna.depth,
			qna.funding_qna_state,
			qna.funding_qna_secret,
			qna.funding_qna_content,
			qna.funding_qna_writer_idx,
			qna.funding_qna_regdate,
			mem.member_name,
			mem.member_business_name
		FROM funding_qna AS qna
		JOIN member AS mem 
		ON qna.funding_idx = 111 and qna.member_idx = mem.member_idx and qna.parent_id = #{funding_qna_idx}
	</select>
	
	<!-- 펀딩 qna 답변 등록 완료 -->
	<update id="qnaAnswerDone" parameterType="FundingQnaVO">
		UPDATE funding_qna 
		SET funding_qna_state = 1
		WHERE funding_idx = #{funding_idx} and funding_qna_idx = #{funding_qna_idx};
	</update>
	
	<!-- 펀딩 qna 답변 수정 -->
	<update id="qnaAnswerModify" parameterType="FundingQnaVO">
		UPDATE funding_qna 
		SET funding_qna_content = #{funding_qna_content}
		WHERE parent_id = #{funding_qna_idx};
	</update>
	
	<!-- 펀딩 qna 수정 -->
	<update id="modifyFundingQna" parameterType="FundingQnaVO">
		UPDATE funding_qna 
		SET funding_qna_content = #{funding_qna_content}, funding_qna_secret = #{funding_qna_secret}
		WHERE funding_qna_idx = #{funding_qna_idx};
	</update>
	
	<!-- 펀딩 qna 삭제 -->
	<delete id="deleteFundingQna" parameterType="FundingQnaVO">
		DELETE FROM funding_qna
		WHERE funding_qna_idx = #{funding_qna_idx};
	</delete>
	
	<!-- 펀딩 qna 개수 -->
	<select id="countFundingQna" parameterType="FundingQnaVO" resultType="int">
		SELECT COUNT(funding_qna_idx)
		FROM funding_qna
		where funding_idx=#{funding_idx} and depth = 0;
	</select>
	
	<!-- 찜 등록 -->
	<insert id="insertZzim" parameterType="java.util.HashMap" useGeneratedKeys="true" keyProperty="zzim_idx">
		insert into zzim
		(
			member_idx,
            funding_idx,
            store_idx
        )
        values
        (
        	#{member_idx},
            #{funding_idx},
            #{store_idx}
        )
	</insert>
	<!-- 찜 가져오기 -->
	<select id="selectZzim" resultType="ZzimVO" parameterType="java.util.HashMap">
		SELECT member_idx
		FROM zzim
		WHERE funding_idx = #{funding_idx} AND member_idx = #{member_idx};
	</select>
	<!-- 찜 취소 -->
	<delete id="deleteZzim" parameterType="java.util.HashMap">
		DELETE FROM zzim
		WHERE funding_idx = #{funding_idx} AND member_idx = #{member_idx};
	</delete>
	
	
	
	<!-- 펀딩 옵션 리스트 -->
	<select id="list" resultType="Funding_optionVO">
		SELECT funding_idx,
			   funding_option_idx,
			   funding_option_name,
			   funding_option_price,
			   funding_option_detail,
			   funding_option_stock
		  FROM funding_option
		 WHERE funding_idx = #{funding_idx};
	</select>
	
	
	<!-- 펀딩 등록 하기 -->
	<insert id="Funding_reg" parameterType="fundingMainVO" useGeneratedKeys="true" keyProperty="funding_idx">
		INSERT INTO funding(
		 member_idx
		,funding_title
		,funding_thumbnail
		,funding_content
		,funding_notice
		,funding_target_price
		,funding_current_price
		,funding_start_date
		,funding_end_date
		,funding_permit_state
		,funding_current_state
		,funding_category
		,funding_express_date
		,funding_express_fee
		,funding_views
		)
		VALUES(
		#{member_idx}
		,#{funding_title}
		,#{funding_thumbnail}
		,#{funding_content}
		,#{funding_notice}
		,#{funding_target_price}
		,#{funding_current_price}
		,#{funding_start_date}
		,#{funding_end_date}
		,#{funding_permit_state}
		,#{funding_current_state}
		,#{funding_category}
		,#{funding_express_date}
		,#{funding_express_fee}
		,#{funding_views}
		)
	</insert>
	
	
	<!-- List<Funding_optionVO> INSERT문 -->
	<insert id="insListOption" parameterType="java.util.List">
		INSERT INTO funding_option(
				funding_idx
			   ,funding_option_name
			   ,funding_option_price
			   ,funding_option_detail
			   ,funding_option_stock
			)
		VALUES
		<foreach collection="list" item="item" separator=",">
		(
			#{item.funding_idx}
		   ,#{item.funding_option_name}
		   ,#{item.funding_option_price}
		   ,#{item.funding_option_detail}
		   ,#{item.funding_option_stock}
		)
		</foreach>
	</insert>
	
	
	<!-- 주문 번호 -->
	<insert id="insertOrder" parameterType="Funding_orderVO">
		INSERT INTO funding_order(
			member_idx
		  , funding_idx
		  , funding_order_donation
		  , funding_order_total_price
		  , funding_order_pay_state
		  , funding_order_date
		)VALUES(
			#{member_idx}
		  , #{funding_idx}
		  , #{funding_order_donation}
		  , #{funding_order_total_price}
		  , #{funding_order_pay_state}
		  , now()
		)
	</insert>
	
	<!-- 주문 옵션 번호 -->
	<insert id="insertOrderOption" parameterType="Funding_order_optionVO">
		INSERT INTO funding_order_option(
			funding_order_idx
		  , funding_order_option_select_idx
		  , funding_order_option_select_count
		)VALUES(
			(SELECT MAX(funding_order_idx) FROM funding_order)
		  , #{funding_order_option_select_idx}
		  , #{funding_order_option_select_count}
		)
	</insert>
	
	<!-- 주문 배송지 정보 -->
	<insert id="insertExpress" parameterType="Funding_expressVO">
		INSERT INTO funding_express(
			funding_order_idx
		  , member_idx
		  , funding_express_postnum
		  , funding_express_addr1
		  , funding_express_addr2
		  , funding_express_phone
		  , funding_express_name
		)VALUES(
			(SELECT MAX(funding_order_idx) FROM funding_order)
		  , #{member_idx}
		  , #{funding_express_postnum}
		  , #{funding_express_addr1}
		  , #{funding_express_addr2}
		  , #{funding_express_phone}
		  , #{funding_express_name}
		)
	</insert>
	
	<!-- 결제 정보 -->
	<insert id="insertPay" parameterType="Funding_order_payVO">
		INSERT INTO funding_order_pay(
			funding_order_idx
		  , funding_order_pay_card_num
		  , funding_order_pay_card_valid
		  , funding_order_pay_card_password
		  , funding_order_pay_register_num
		)VALUES(
			(SELECT MAX(funding_order_idx) FROM funding_order)
		  , #{funding_order_pay_card_num}
		  , #{funding_order_pay_card_valid}
		  , #{funding_order_pay_card_password}
		  , #{funding_order_pay_register_num}
		)
	</insert>
	
	<!-- 결제 금액 합산 -->
	<update id="addPrice" parameterType="Funding_orderVO">
		UPDATE funding
		SET    funding_current_price = (funding_current_price + #{funding_order_total_price})
		WHERE  funding_idx = #{funding_idx}
	</update>
	<!-- 결제 완료 시 펀딩 옵션 수량 바뀜 -->
	<update id="update_option" parameterType="Funding_order_optionVO">
		UPDATE funding_option 
		SET funding_option_stock = funding_option_stock - #{funding_order_option_select_count}
		where funding_option_idx = #{funding_order_option_select_idx}
	</update>
</mapper>