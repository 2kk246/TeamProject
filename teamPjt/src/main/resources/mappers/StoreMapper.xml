<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="StoreMapper">
	
	<!-- 스토어 메인 리스트 -->
	<select id="listMain" parameterType="StoreVO" resultType="StoreVO">
		SELECT 
			s.store_idx,
			s.member_idx,
			s.funding_idx,
			s.store_price,
			s.store_title,
			s.store_thumbnail,
			s.store_content,
			s.store_notice,
			s.store_write_date,
			s.store_permit_state,
			s.store_current_state,
			s.store_category,
			s.store_funding,
			s.store_express_fee,
			s.store_views,
		<choose>
			<when test="sortStar != null">
				sr.avg_star
				from store s
				left outer join (select AVG(sr.store_review_star) as 'avg_star', store_idx from store_review sr group by store_idx) sr
				<choose>
					<when test="fund != null">
						on s.store_funding = 1 AND s.store_idx = sr.store_idx AND store_permit_state=1
					</when>
					<when test="dog != null">
						on s.store_category = 0 AND s.store_idx = sr.store_idx AND store_permit_state=1
					</when>
					<when test="cat != null">
						on s.store_category = 1 AND s.store_idx = sr.store_idx AND store_permit_state=1
					</when>
					<when test="other != null">
						on s.store_category = 2 AND s.store_idx = sr.store_idx AND store_permit_state=1
					</when>
					<otherwise>
						on s.store_funding = 1 AND s.store_idx = sr.store_idx AND store_permit_state=1
					</otherwise>
				</choose>
				order by sr.avg_star desc limit #{startRowNum}, 12;
			</when>
			<otherwise>
					m.member_idx,
					m.member_business_name
				FROM store s, member m
				<choose>
					<when test="fund != null">
						where s.store_funding = 1 AND s.member_idx = m.member_idx AND store_permit_state=1
					</when>
					<when test="dog != null">
						where s.store_category = 0 AND s.member_idx = m.member_idx AND store_permit_state=1
					</when>
					<when test="cat != null">
						where s.store_category = 1 AND s.member_idx = m.member_idx AND store_permit_state=1
					</when>
					<when test="other != null">
						where s.store_category = 2 AND s.member_idx = m.member_idx AND store_permit_state=1
					</when>
					<otherwise>
						where s.store_funding = 1 AND s.member_idx = m.member_idx AND store_permit_state=1
					</otherwise>
				</choose>
				<choose>
					<when test="sortNew != null">
						order by store_idx desc limit #{startRowNum}, 12;
					</when>
					<when test="sortView != null">
						order by store_views desc limit #{startRowNum}, 12;
					</when>
					<when test="sortHighPrice != null">
						order by store_price desc limit #{startRowNum}, 12;
					</when>
					<when test="sortLowPrice != null">
						order by store_price asc limit #{startRowNum}, 12;
					</when>
					<otherwise>
						order by store_idx desc limit #{startRowNum}, 12;
					</otherwise>
				</choose>
			</otherwise>
		</choose>
			
	</select>
	<!-- 스토어 메인 카운트 -->
	<select id="listMainCount" resultType="int">
		SELECT COUNT(store_idx)
		FROM store
		<choose>
			<when test="fund != null">
				where store_funding = 1 AND store_permit_state=1
			</when>
			<when test="dog != null">
				where store_category = 0 AND store_permit_state=1
			</when>
			<when test="cat != null">
				where store_category = 1 AND store_permit_state=1
			</when>
			<when test="other != null">
				where store_category = 2 AND store_permit_state=1
			</when>
			<otherwise>
				where store_funding = 1 AND store_permit_state=1
			</otherwise>
		</choose>
	</select>
	<!-- 조회수 증가 -->
	<update id="storeViews" parameterType="int">
		UPDATE store SET
		store_views = store_views+1
		WHERE store_idx = #{store_idx}
	</update>
	<!-- 스토어 제품 상세ssssssssssssss -->
	<select id="read" parameterType="map" resultType="StoreVO">
		SELECT 
			s.store_idx,
			s.member_idx,
			s.funding_idx,
			s.store_price,
			s.store_title,
			s.store_thumbnail,
			s.store_content,
			s.store_notice,
			s.store_write_date,
			s.store_permit_state,
			s.store_current_state,
			s.store_category,
			s.store_funding,
			s.store_express_fee,
			s.store_views,
			<choose>
				<when test="store_funding > 0">
					m.member_business_name,
					f.funding_current_price
					FROM store s, member m, funding f
					WHERE store_idx = #{store_idx} AND s.member_idx = m.member_idx AND s.funding_idx = f.funding_idx
				</when>
				<otherwise>
					m.member_business_name
					FROM store s, member m
					WHERE store_idx = #{store_idx} AND s.member_idx = m.member_idx
				</otherwise>
			</choose>
	</select>
	
	<!-- 스토어 리뷰 리스트ss -->
	<select id="storeReviewList" parameterType="StoreReviewVO" resultType="StoreReviewVO">
		SELECT
			sr.store_review_idx,
			sr.store_idx,
			sr.member_idx,
			sr.store_review_star,
			sr.store_review_like,
			sr.store_review_content,
			sr.store_review_regdate,
			sr.store_review_option,
			sr.store_review_photo1,
			sr.store_review_photo2,
			sr.store_review_photo3,
			sr.store_review_photo4,
			sr.store_review_photo5,
			m.member_name,
			m.member_photo
		FROM store_review sr, member m
		WHERE sr.store_idx = #{store_idx} and sr.member_idx = m.member_idx
		<choose>
			<when test="sortReviewLike != null">
				order by store_review_like desc limit #{startRowNum}, 5;
			</when>
			<when test="sortReviewNew != null">
				order by store_review_idx desc limit #{startRowNum}, 5;
			</when>
			<when test="sortReviewHighStar != null">
				order by store_review_star desc limit #{startRowNum}, 5;
			</when>
			<when test="sortReviewLowStar != null">
				order by store_review_star asc limit #{startRowNum}, 5;
			</when>
			<otherwise>
				order by store_review_like desc limit #{startRowNum}, 5;
			</otherwise>
		</choose>
	</select>
	<!-- 스토어 리뷰 카운트 -->
	<select id="countStoreReviewList" parameterType="StoreReviewVO" resultType="int">
		SELECT COUNT(store_review_idx)
		FROM store_review
		where store_idx=#{store_idx};
	</select>
	<!-- 리뷰 사진만 가져오기 -->
	<select id="storeReviewPhoto" parameterType ="StoreReviewVO" resultType="StoreReviewVO">
		SELECT  
				store_review_idx,
				store_review_photo1,
				store_review_photo2,
				store_review_photo3,
				store_review_photo4,
				store_review_photo5
		FROM store_review
		WHERE store_idx = #{store_idx}
		order by store_review_idx desc;
	</select>
	<!-- 수정하기에 리뷰 가져가기 -->
	<select id="getReview" parameterType="map" resultType="StoreReviewVO">
		SELECT
			store_review_idx,
			store_idx,
			member_idx,
			store_order_idx,
			store_review_star,
			store_review_like,
			store_review_content,
			store_review_regdate,
			store_review_option,
			store_review_photo1,
			store_review_photo2,
			store_review_photo3,
			store_review_photo4,
			store_review_photo5
		FROM
			store_review
		WHERE
			store_idx = #{store_idx} AND member_idx = #{member_idx} AND store_order_idx = #{store_order_idx};
	</select>
	<!-- 스토어 별점 평균 -->
	<select id="starAvg" resultType="double">
		select avg(store_review_star) 
		from store_review
		where store_idx = #{store_idx};
	</select>
	<!-- 스토어 별점 별 카운트 -->
	<select id="star5" resultType="int">
		select count(store_review_star) from store_review where store_idx = #{store_idx} and store_review_star=5;
	</select>
	<select id="star4" resultType="int">
		select count(store_review_star) from store_review where store_idx = #{store_idx} and store_review_star=4;
	</select>
	<select id="star3" resultType="int">
		select count(store_review_star) from store_review where store_idx = #{store_idx} and store_review_star=3;
	</select>
	<select id="star2" resultType="int">
		select count(store_review_star) from store_review where store_idx = #{store_idx} and store_review_star=2;
	</select>
	<select id="star1" resultType="int">
		select count(store_review_star) from store_review where store_idx = #{store_idx} and store_review_star=1;
	</select>
	<!-- 스토어 별점 별 카운트 끝 -->
	<!-- 스토어 리뷰 작성 -->
	<insert id="storeReviewWrite" parameterType ="StoreReviewVO">
		INSERT INTO store_review
			(
				store_idx,
				member_idx,
				store_order_idx,
				store_review_star,
				store_review_content,
				store_review_option,
				store_review_photo1,
				store_review_photo2,
				store_review_photo3,
				store_review_photo4,
				store_review_photo5
			)
		VALUES
			(
				#{store_idx},
				#{member_idx},
				#{store_order_idx},
				#{store_review_star},
				#{store_review_content},
				#{store_review_option},
				#{store_review_photo1},
				#{store_review_photo2},
				#{store_review_photo3},
				#{store_review_photo4},
				#{store_review_photo5}
			)
	</insert>
	<!-- 스토어 리뷰 수정ssss -->
	<update id="storeReviewModify" parameterType ="StoreReviewVO">
		UPDATE store_review
		SET
			store_review_star = #{store_review_star},
			store_review_content = #{store_review_content},
			store_review_photo1 = #{store_review_photo1},
			store_review_photo2 = #{store_review_photo2},
			store_review_photo3 = #{store_review_photo3},
			store_review_photo4 = #{store_review_photo4},
			store_review_photo5 = #{store_review_photo5}
		WHERE store_idx = #{store_idx} AND member_idx = #{member_idx} AND store_order_idx = #{store_order_idx};
	</update>
	<!-- 스토어 리뷰 삭제 -->
	<delete id="storeReviewDelete" parameterType="StoreReviewVO">
		DELETE FROM store_review
		WHERE store_idx = #{store_idx} AND member_idx = #{member_idx} AND store_order_idx = #{store_order_idx};
	</delete>
	<!-- 스토어 리뷰 관리자 삭제 -->
	<delete id="storeReviewAdminDelete" parameterType="StoreReviewVO">
		DELETE FROM store_review
		WHERE store_review_idx = #{store_review_idx};
	</delete>
	<!-- 찜 가져오기 -->
	<select id="selectZzimStore" resultType="ZzimVO" parameterType="java.util.HashMap">
		SELECT member_idx
		FROM zzim
		WHERE store_idx = #{store_idx} AND member_idx = #{member_idx};
	</select>
	<!-- 찜 취소 -->
	<delete id="deleteZzimStore" parameterType="java.util.HashMap">
		DELETE FROM zzim
		WHERE store_idx = #{store_idx} AND member_idx = #{member_idx};
	</delete>
	<!-- 리뷰 추천 하기 -->
	<insert id="doReviewLike" parameterType="java.util.HashMap" useGeneratedKeys="true" keyProperty="store_review_like_idx">
		INSERT INTO store_review_like
			(
				store_review_idx,
				member_idx
			)
		VALUES
			(
				#{store_review_idx},
				#{member_idx}
			)
	</insert>
	<!-- 리뷰 추천 개수 가져오기 -->
	<select id="getReviewLikeNum" parameterType="java.util.HashMap" resultType="int">
		SELECT store_review_like
		FROM store_review
		WHERE store_review_idx = #{store_review_idx};
	</select>
	<!-- 리뷰 추천 수 증가 -->
	<update id="updateReviewLike" parameterType="java.util.HashMap" useGeneratedKeys="true">
		UPDATE store_review 
		SET store_review_like = store_review_like+1
		WHERE store_review_idx = #{store_review_idx};
	</update>
	<!-- 리뷰 추천 여부 가져오기ss -->
	<select id="selectThumbsUp" resultType="StoreReviewLikeVO" parameterType="java.util.HashMap">
		SELECT member_idx
		FROM store_review_like
		WHERE store_review_idx = #{store_review_idx} AND member_idx = #{member_idx};
	</select>
	<!-- 리뷰 추천 취소 하기 -->
	<delete id="cancelLike" parameterType="java.util.HashMap">
		DELETE FROM store_review_like
		WHERE store_review_idx = #{store_review_idx} AND member_idx = #{member_idx};
	</delete>
	<!-- 리뷰 추천 수 감소 -->
	<update id="updateReviewLike2" parameterType="java.util.HashMap" useGeneratedKeys="true">
		UPDATE store_review 
		SET store_review_like = store_review_like-1
		WHERE store_review_idx = #{store_review_idx};
	</update>
	
	
<!-- 스토어 qna 시작 --><!-- 스토어 qna 시작 --><!-- 스토어 qna 시작 --><!-- 스토어 qna 시작 --><!-- 스토어 qna 시작 --><!-- 스토어 qna 시작 -->
	<!-- 스토어 qna 작성 -->
	<insert id="insertStoreQna" parameterType="java.util.HashMap" useGeneratedKeys="true" keyProperty="store_qna_idx">
		insert into store_qna
		(
            store_idx,
            member_idx,
            parent_id,
            depth,
            store_qna_secret,
            store_qna_content,
            store_qna_writer_idx
        )
        values
        (
            #{store_idx},
            #{member_idx},
            #{parent_id},
            #{depth},
            #{store_qna_secret},
            #{store_qna_content},
            #{store_qna_writer_idx}
        )
	</insert>
	<!-- 스토어 qna 댓글 리스트 ssss-->
	<select id="readStoreQnaList" resultType="StoreQnaVO" parameterType="java.util.HashMap">
		select 
			qna.store_qna_idx,
			qna.store_idx,
			qna.member_idx,
			qna.parent_id,
			qna.depth,
			qna.store_qna_state,
			qna.store_qna_secret,
			qna.store_qna_content,
			qna.store_qna_writer_idx,
			qna.store_qna_regdate,
			mem.member_name,
			mem.member_business_name
		FROM store_qna AS qna
		JOIN member AS mem 
		ON qna.store_idx = #{store_idx} and qna.member_idx = mem.member_idx and qna.depth = 0
		order by store_qna_idx desc limit ${startRowNumQna}, 9;
	</select>
	<!-- 스토어 qna 댓글 답변-->
	<select id="readStoreQnaAnswer" resultType="StoreQnaVO" parameterType="java.util.HashMap">
		select 
			qna.store_qna_idx,
			qna.store_idx,
			qna.member_idx,
			qna.parent_id,
			qna.depth,
			qna.store_qna_state,
			qna.store_qna_secret,
			qna.store_qna_content,
			qna.store_qna_writer_idx,
			qna.store_qna_regdate,
			mem.member_name,
			mem.member_business_name
		FROM store_qna AS qna
		JOIN member AS mem 
		ON qna.store_idx = ${store_idx} and qna.member_idx = mem.member_idx and qna.parent_id = #{store_qna_idx}
	</select>
	<!-- 스토어 qna 답변 등록 완료 -->
	<update id="qnaAnswerDone" parameterType="StoreQnaVO">
		UPDATE store_qna 
		SET store_qna_state = 1
		WHERE store_idx = #{store_idx} and store_qna_idx = #{store_qna_idx};
	</update>
	<!-- 스토어 qna 답변 수정 -->
	<update id="qnaAnswerModify" parameterType="StoreQnaVO">
		UPDATE store_qna 
		SET store_qna_content = #{store_qna_content}
		WHERE parent_id = #{store_qna_idx};
	</update>
	<!-- 스토어 qna 수정 -->
	<update id="modifyStoreQna" parameterType="StoreQnaVO">
		UPDATE store_qna 
		SET store_qna_content = #{store_qna_content}, store_qna_secret = #{store_qna_secret}
		WHERE store_qna_idx = #{store_qna_idx};
	</update>
	<!-- 스토어 qna 삭제 -->
	<delete id="deleteStoreQna" parameterType="StoreQnaVO">
		DELETE FROM store_qna
		WHERE store_qna_idx = #{store_qna_idx};
	</delete>
	<!-- 스토어 qna 개수 -->
	<select id="countStoreQna" parameterType="StoreQnaVO" resultType="int">
		SELECT COUNT(store_qna_idx)
		FROM store_qna
		where store_idx=#{store_idx} and depth = 0;
	</select>
<!-- 스토어 qna 끝 --><!-- 스토어 qna 끝 --><!-- 스토어 qna 끝 --><!-- 스토어 qna 끝 --><!-- 스토어 qna 끝 --><!-- 스토어 qna 끝 --><!-- 스토어 qna 끝 -->
	
	<!-- 스토어 옵션 리스트 -->
	<select id="storeOptionList" resultType="StoreOptionVO">
		SELECT store_idx,
			   store_option_idx,
			   store_option_name,
			   store_option_price,
			   store_option_detail,
			   store_option_stock
		  FROM store_option
		 WHERE store_idx = #{store_idx}
	</select>
	
	<!-- 스토어 상품 등록 -->
	<insert id="store_Reg" parameterType="StoreVO" useGeneratedKeys="true" keyProperty="store_idx">
		INSERT INTO store(
			member_idx,
			store_price,
			store_title,
			store_thumbnail,
			store_content,
			store_notice,
			store_permit_state,
			store_current_state,
			store_category,
			store_express_fee
		)
		VALUES(
			#{member_idx},
			#{store_price},
			#{store_title},
			#{store_thumbnail},
			#{store_content},
			#{store_notice},
			#{store_permit_state},
			#{store_current_state},
			#{store_category},
			#{store_express_fee}
		)
	
	</insert>
	
	<!-- 스토어 옵션 등록 -->
	<insert id="StoreOption_Reg" parameterType="java.util.List">
		INSERT INTO store_option(
				store_idx
			   ,store_option_name
			   ,store_option_price
			   ,store_option_detail
			   ,store_option_stock
			)
		VALUES
		<foreach collection="list" item="item" separator=",">
		(
			#{item.store_idx}
		   ,#{item.store_option_name}
		   ,#{item.store_option_price}
		   ,#{item.store_option_detail}
		   ,#{item.store_option_stock}
		)
		</foreach>
	</insert>
	
	
	<!-- 결제 -->
	<!-- 주문 번호 -->
	<insert id="insertOrder" parameterType="StoreOrderVO">
		INSERT INTO store_order(
			member_idx
		  , store_idx
		  , store_order_total_price
		  , store_order_pay_state
		  , store_order_date
		)VALUES(
			#{member_idx}
		  , #{store_idx}
		  , #{store_order_total_price}
		  , #{store_order_pay_state}
		  , now()
		)
	</insert>
	<!-- 주문 옵션 번호 -->
	<insert id="insertOrderOption" parameterType="StoreOrderOptionVO">
		INSERT INTO store_order_option(
			store_order_idx
		  , store_order_option_select_idx
		  , store_order_option_select_count
		)VALUES(
			(SELECT MAX(store_order_idx) FROM store_order)
		  , #{store_order_option_select_idx}
		  , #{store_order_option_select_count}
		)
	</insert>
	<!-- 주문 배송지 정보 -->
	<insert id="insertExpress" parameterType="StoreExpressVO">
		INSERT INTO store_express(
			store_order_idx
		  , member_idx
		  , store_express_postnum
		  , store_express_addr1
		  , store_express_addr2
		  , store_express_phone
		  , store_express_name
		)VALUES(
			(SELECT MAX(store_order_idx) FROM store_order)
		  , #{member_idx}
		  , #{store_express_postnum}
		  , #{store_express_addr1}
		  , #{store_express_addr2}
		  , #{store_express_phone}
		  , #{store_express_name}
		)
	</insert>
	<!-- 결제 정보 -->
	<insert id="insertPay" parameterType="StoreOrderPayVO">
		INSERT INTO store_order_pay(
			store_order_idx
		  , store_order_pay_card_name
		  , store_order_pay_card_number
		  , store_order_pay_amount
		)VALUES(
			(SELECT MAX(store_order_idx) FROM store_order)
		  , #{store_order_pay_card_name}
		  , #{store_order_pay_card_number}
		  , #{store_order_pay_amount}
		)
	</insert>
	<!-- 결제 완료 - 스토어 정보 -->
	<select id="store_info" resultType="StoreVO">
		SELECT store_title 
		FROM store 
		WHERE store_idx = #{store_idx};
	</select>
	
	<!-- 결제 완료 시 스토어 옵션 수량 빼기 -->
	<update id="update_option" parameterType="StoreOrderOptionVO">
		UPDATE store_option 
		SET store_option_stock = store_option_stock - #{store_order_option_select_count}
		where store_option_idx = #{store_order_option_select_idx}
	</update>
	
</mapper>